module Yggdrasil

  # Mutator helper class
  #
  # @since 1.0.0
  # @author Nate Strandberg
  #
  # @attr [GraphQL::Relay::Mutation] mutation_type
  # @attr [ActiveRecord::Base] model
  # @attr [FieldMap] field_map
  #
  # @example Simple Creation Mutation
  #   CreateUser = GraphQL::Relay::Mutation.define do
  #     name 'CreateUser'
  #
  #     mutator = Mutator.create(self, User) do
  #       input :first_name
  #       input :last_name
  #       input :email
  #     end
  #
  #     return_field :user, UserType
  #
  #     resolve ->(obj, inputs, ctx) do
  #       user = User.new
  #
  #       runner = mutator.runner(user, inputs)
  #       runner.apply_changes
  #       runner.validate!
  #       runner.save!
  #
  #       { user: user }
  #     end
  #   end
  #
  class Mutator
    attr_accessor :mutation_type, :model, :field_map

    class << self

      # Fluent creator method
      #
      # @param [GraphQL::Relay::Mutation] mutation_type The GraphQL mutation object.
      # @param [ActiveRecord::Base] model The AR model that this mutator is for.
      # @param [Hash] options Additional options.
      def create(mutation_type, model, **options, &block)
        instance = new(mutation_type, model, **options)
        instance.field_map.instance_exec(&block) if block_given?

        prefix = mutation_type.instance_variable_get(:@target).name
        add_input_fields(mutation_type, instance.field_map, prefix)
        instance
      end

      # Helper method for adding input_fields to a GraphQL mutation
      #
      # @param [GraphQL::Relay::Mutation] mutation_type
      # @param [FieldMap] field_map
      # @param [String] prefix
      def add_input_fields(mutation_type, field_map, prefix)
        # Just Nate being overly pedantic and trying to remove duplicate "Input" words, something to play with if bored...
        # prefix.gsub!(/(^|\s+)(\S+)(($|\s+)\2)+/i, '$1$2')
        mutation_type.instance_exec do
          field_map.each do |field|
            type = field[:type]
            type = type.to_non_null_type if field[:required]
            options = field.slice(:default_value, :prepare, :as)

            input_field(field[:name], type, field[:description], **options)
          end
        end

        # Create individual input object types for nested associations
        field_map.nested.each do |nested|
          type = create_input_type(nested, "#{prefix}#{nested.name.to_s.classify}Input")
          type = type.to_non_null_type.to_list_type if nested.has_many?
          type = type.to_non_null_type if nested.required

          mutation_type.instance_exec do
            input_field(nested.name, type)
          end
        end
      end

      # Helper method for creating a new GraphQL input object type.
      # noinspection RubyArgCount
      #
      # @param [FieldMap] field_map
      # @param [String] name
      def create_input_type(field_map, name)
        raise StandardError, "`#{name}` must have at least one field" if field_map.inputs.size <= 0

        GraphQL::InputObjectType.define do
          name(name)
          description(field_map.description || "Autogenerated input type of #{name}")
          Mutator.add_input_fields(self, field_map, name)
        end
      end
    end

    # Constructor
    #
    # @param [GraphQL::Relay::Mutation] mutation_type The GraphQL mutation object.
    # @param [ActiveRecord:Base] model The AR model that this mutator is for.
    # @param [Hash] options Additional options.
    def initialize(mutation_type, model, **options)
      @mutation_type = mutation_type
      @field_map     = FieldMap.new(model, **options)
      @model         = model
    end

    # Instantiates a mutation runner that can apply changes, handle validation errors, etc.
    #
    # @param [ActiveRecord:Base] record The root record to apply changes to.
    # @param [GraphQL::Query::Arguments] inputs Mutation inputs to apply.
    def runner(record, inputs)
      # noinspection RubyArgCount
      Runner.new(record, inputs, field_map)
    end
  end
end
